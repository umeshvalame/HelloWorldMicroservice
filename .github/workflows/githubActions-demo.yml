name: Demo React Application
on: 
  push:
    branches: 
        - main
env:
  IMAGE_NAME: umeshvalame/react-app
  AWS_REGION: us-east-1
  ECS_SERVICE: nginxdemos-reactapp
  ECS_CLUSTER: demoCluster
  ECS_TASK_DEFINITION: nginxdemos-reactapp
  CONTAINER_IMAGE: umeshvalame/react-app
  CONTAINER_NAME: nginxdemos-reactapp

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event"
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}"      
      - name: List files in the repository
        run: ls ${{ github.workspace }}
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Building the image from Dockerfile
        run: docker build -t umeshvalame/react-app:latest reach-app/
      - run: echo "Docker build Job status is now ${{job.status}}"
      - name: Login to Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCER_PASSWORD}}
      - name: Push image to docker Hub
        run: docker push umeshvalame/react-app:latest
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.CONTAINER_IMAGE }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true